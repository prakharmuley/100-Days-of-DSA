Problem Link: https://leetcode.com/problems/all-elements-in-two-binary-search-trees/



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

//Recursive Apprach 

    List<Integer> l=new ArrayList<>();   
    public void preorder(TreeNode root)
    {
        if(root==null) return;     
        l.add(root.val);
        preorder(root.left);
        preorder(root.right);
    }
      
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
       preorder(root1);
       preorder(root2); 
       Collections.sort(l);
        return l;
    } 
    
}


//Iterative Appraoch

class Solution {
 public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
      Stack<TreeNode> st1=new Stack<>();
      Stack<TreeNode> st2=new Stack<>();
      List<Integer> l=new ArrayList<>();
      while(root1!=null||root2!=null||!st1.isEmpty()||!st2.isEmpty())
      {
          while(root1!=null)
          {
              st1.push(root1);
              root1=root1.left;
          }
           while(root2!=null)
          {
              st2.push(root2);
              root2=root2.left;
          }
          int a=st1.isEmpty()?Integer.MAX_VALUE:st1.peek().val;
           int b=st2.isEmpty()?Integer.MAX_VALUE:st2.peek().val;
          if(a<b)
          {
             root1=st1.pop();
               l.add(root1.val);
              root1=root1.right;
          }
          else
          {
             root2=st2.pop();
             l.add(root2.val);
             root2=root2.right; 
           }
      }    
        return l;
    }  
}

