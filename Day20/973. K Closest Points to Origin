Problem Link:  https://leetcode.com/problems/k-closest-points-to-origin/



class Solution {
    public int[][] kClosest(int[][] points, int k) {
        
        if(k==points.length) return points;
        
        PriorityQueue<Pair> pq=new PriorityQueue<> ( (p1,p2)->((p2.d-p1.d)))   ;
        for(int i=0;i<points.length;i++)
        {
            int dis=points[i][0]*points[i][0]+points[i][1]*points[i][1];
            pq.add(new Pair(points[i][0],points[i][1],dis));
            if(pq.size()>k) pq.poll();
        }
       int ans[][]=new int[k][2];
       int i=0;
       while(!pq.isEmpty())
        {
            Pair p=pq.poll();
            ans[i][0]=p.x;
            ans[i][1]=p.y;          
            i++;
        }
        return ans;    
    }
    
}
class Pair{
    int x;
    int y;
    int d;
    public Pair(int x, int y, int d)
    {
        this.x=x;
        this.y=y;
        this.d=this.x*this.x+this.y*this.y;
     
    }
}
