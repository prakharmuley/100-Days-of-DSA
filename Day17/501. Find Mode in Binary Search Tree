Problem Link: https://leetcode.com/problems/find-mode-in-binary-search-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */



// O(n) Space
class Solution {
    public void dfs(TreeNode root,Map<Integer,Integer> mp)
    {
        if(root==null) return;
        if(!mp.containsKey(root.val)) mp.put(root.val,1);
        else mp.put(root.val,mp.get(root.val)+1);
        dfs(root.left,mp);
        dfs(root.right,mp);
    }
    public int[] findMode(TreeNode root) {
        Map<Integer,Integer> mp=new HashMap<>();
        dfs(root,mp);
        int mx=0;
        for(Map.Entry<Integer,Integer> e: mp.entrySet())
        {
            mx=Math.max(mx,e.getValue());
        }
        List<Integer> l=new ArrayList<>();
         for(Map.Entry<Integer,Integer> e: mp.entrySet())
        {
           if(e.getValue()==mx) l.add(e.getKey());
        }
        
         int[] arr = l.stream().mapToInt(i -> i).toArray();
        return arr;
    }
}


// O(1) Space
 class Solution {
    private int cnt=0;
    private int mx=-1;
    private TreeNode prev;
    public void dfs(TreeNode root,List<Integer> l)
    {
      if(root==null) return;
        dfs(root.left,l);
      cnt=root.val==prev.val?cnt+1:1;
      if(cnt>mx)
      {
          mx=cnt;
          l.clear();
          l.add(root.val);
      }
      else if(cnt==mx)
      {
          l.add(root.val);
      }
        prev=root;
        dfs(root.right,l);
    }
    public int[] findMode(TreeNode root) {
        List<Integer> l=new ArrayList<>();
        prev=root;
        dfs(root,l);
        int[] arr = l.stream().mapToInt(i -> i).toArray();
        return arr;
    }
}
