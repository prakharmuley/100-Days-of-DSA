Problem Link: https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/



class Solution {
    public int[] kWeakestRows(int[][] mat, int k) {
  //     Pair p[]=new Pair[mat.length];
        PriorityQueue<Pair> pq=new PriorityQueue<>((p1,p2)->p1.f!=p2.f?p2.f-p1.f:p2.s-p1.s);
        for(int i=0;i<mat.length;i++)
        {
             int l=0,r=mat[i].length;
            while(l<r)
            {
                int mid=l+((r-l)>>1);
                if(mat[i][mid]==0) 
                {  
                    r=mid;    
                }
                else if(mat[i][mid]==1)
                {
                    l=mid+1;
                }
            }
            
            pq.add(new Pair(l,i));
              if (pq.size() > k)
                pq.poll();
           
        }
        int ans[]=new int[k];
        int i=0;
       while (k > 0)
            ans[--k] = pq.poll().s;
        return ans;
        
    }
   
}
 class Pair{
        int f;
     int s;
     public Pair(int f, int s)
     {
         this.f=f;
         this.s=s;
     }
    }
