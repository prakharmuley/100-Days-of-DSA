Problem Link: https://leetcode.com/problems/minimum-depth-of-binary-tree/



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
 

class Solution {
    // DFS
    public int minDepth(TreeNode root) {
       if(root==null) return 0;
        int l=minDepth(root.left);
        int r=minDepth(root.right);
        if(l==0||r==0)  return 1+Math.max(l,r); 
        else
        return 1+Math.min(l,r);    
    }
    
    //BFS
     public int minDepth(TreeNode root) {
         if(root==null) return 0;
         Queue<TreeNode> q=new LinkedList<>();
         q.offer(root);
         int lvl=1;
         while(!q.isEmpty())
         {
             int l=q.size();
             for(int i=0;i<l;i++)
             {
                 TreeNode cur=q.poll();
                 if(cur.left==null&&cur.right==null) return lvl;
                 if(cur.left!=null) q.offer(cur.left);
                 if(cur.right!=null) q.offer(cur.right);
             }
             lvl++;   
         }
       return lvl;
    }
    
    
}





