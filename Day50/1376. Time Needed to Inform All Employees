Problem Link: https://leetcode.com/problems/time-needed-to-inform-all-employees/


//BFS Approach
class Solution {
    public int numOfMinutes(int n, int headID, int[] a, int[] t) {
        if(n==1) return 0;
        ArrayList<Integer>[] adj=new ArrayList[n];
        for(int i=0;i<n;i++)
        {
            adj[i]=new ArrayList<>();
        }
        for(int i=0;i<n;i++)
        { 
            if(a[i]!=-1){
            adj[a[i]].add(i);   
            }
        }  
        Queue<int[]> q=new LinkedList<>();
        q.offer(new int[]{headID,0});
        int lvl=0;
        int mx=0;
        int ans=0;
        while(!q.isEmpty())
        {
           int[] p=q.poll();
            int id=p[0];
            int time=p[1];
            mx=Math.max(mx,time);
            for(int x: adj[id])
            {
                q.offer(new int[]{x,time+t[id]});
            }      
        }
        return mx;
        
    }
}

//DFS Approach
class Solution {
    public int dfs(ArrayList<Integer> adj[], int id, int[] t)
    {
        if(adj[id].size()==0) return 0;
        int mx=0;
        for(int x: adj[id])
        {
            mx=Math.max(mx,dfs(adj,x,t));
        }
        return mx+t[id];
    }
    public int numOfMinutes(int n, int headID, int[] a, int[] t) {
  
        ArrayList<Integer>[] adj=new ArrayList[n];
        for(int i=0;i<n;i++)
        {
            adj[i]=new ArrayList<>();
        }
        for(int i=0;i<n;i++)
        { 
            if(a[i]!=-1){
            adj[a[i]].add(i);   
            }
        }
       
        int mx=dfs(adj,headID,t);
        
        return mx;
        
    }
}
