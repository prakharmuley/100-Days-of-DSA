Problem Link: https://leetcode.com/problems/binary-tree-level-order-traversal-ii/



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

Method 1) Reversing The List
class Solution{
    
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        
        List<List<Integer>> l=new ArrayList<>();
        if(root==null) return l;
        Queue<TreeNode> q=new LinkedList<>();
        q.offer(root);
        
        while(!q.isEmpty())
        {
            int n=q.size();
             long avg=0;
            List<Integer> lvl=new ArrayList<>();
            for(int i=0;i<n;i++)
            {
               
                TreeNode cur=q.poll();
                lvl.add(cur.val);
                if(cur.left!=null) q.offer(cur.left);
                if(cur.right!=null) q.offer(cur.right);
     
            }
            l.add(lvl);
        }
        Collections.reverse(l);
        return l;
    }
}


Method 2
class Solution {
    
       public List<List<Integer>> levelOrderBottom(TreeNode root) {
        
        List<List<Integer>> l=new LinkedList<>();
        if(root==null) return l;
        Queue<TreeNode> q=new LinkedList<>();
        q.offer(root);
        
        while(!q.isEmpty())
        {
            int n=q.size();
             long avg=0;
            List<Integer> lvl=new ArrayList<>();
            for(int i=0;i<n;i++)
            {
               
                TreeNode cur=q.poll();
                lvl.add(cur.val);
                if(cur.left!=null) q.offer(cur.left);
                if(cur.right!=null) q.offer(cur.right);
     
            }
            l.add(0,lvl);
        }
      
        return l;
    }
}

