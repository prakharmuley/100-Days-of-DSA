Problem Link: https://leetcode.com/problems/word-ladder-ii/


class Solution {
   
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
       
        Set<String> hs=new HashSet<>(wordList);
        if(!hs.contains(endWord)) return 0;
        if(beginWord.equals(endWord)) return 1;
        Queue<String> q=new LinkedList<>();
        q.add(beginWord);
        int cnt=1;
        while(!q.isEmpty())
        {
          int l=q.size();
            for(int j=0;j<l;j++){
             String temp=q.poll();
                char ch[]=temp.toCharArray();
            int size=ch.length;
            for(int i=0;i<size;i++)
            {
                char cc=ch[i];
             
                for(char c='a';c<='z';c++)
                {
                   
                  ch[i]=c;
                  String s=new String(ch);
                  if(hs.contains(s))
                  {
                    if(s.equals(endWord))
                      return cnt+1;
                      
                    q.add(s);
                    hs.remove(s);  
                  }
                }
                ch[i]=cc;
               }
         }
             cnt+=1;
        }
        
        return 0;
     
    }
}
