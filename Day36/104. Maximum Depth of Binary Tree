Problem Link: https://leetcode.com/problems/maximum-depth-of-binary-tree/



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
     //Iterative
      public int maxDepth(TreeNode root) {
        if(root==null) return 0;
        Stack<TreeNode> st=new Stack<>();
         Stack<Integer> levels=new Stack<>();  
          int mxd=1;
          st.push(root);
          levels.add(mxd);
          while(!st.isEmpty())
          {
              TreeNode node=st.pop();
              int l=levels.pop();
              if(mxd<l) mxd=l;
              
              if(node.right!=null)
              {
                  st.push(node.right);
                  levels.push(l+1);
                  
              }
              if(node.left!=null)
              {
                  st.push(node.left);
                  levels.push(l+1);
              }
          }
          return mxd;
    }
    
    
    
    
    //Recursive
   
    // public int maxDepth(TreeNode root) {
    //     if(root==null) return 0;
    //     int l=maxDepth(root.left);
    //     int r=maxDepth(root.right);
    //     return 1+Math.max(l,r);
    // }
}
