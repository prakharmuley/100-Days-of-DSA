Problem Link: https://leetcode.com/problems/clone-graph/



/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/


//BFS Approach
class Solution {
    public Node cloneGraph(Node node) {
        if(node==null) return null;
        Node temp=node;
        Map<Node,Node> mp=new HashMap<>();
        Queue<Node> q=new LinkedList<>();
        q.offer(node);
        mp.put(node,new Node(node.val));
        while(!q.isEmpty())
        {
            Node cur=q.poll();
            for(Node child: cur.neighbors){
            if(!mp.containsKey(child))
            {
                mp.put(child,new Node(child.val));
                q.offer(child);
            }
                
            
           mp.get(cur).neighbors.add(mp.get(child));
            }
        }
        return mp.get(temp);
    }
}

//DFS Approach
class Solution {
    public Node dfs(Node root, Map<Node,Node> mp)
    {
        if(mp.containsKey(root)) return mp.get(root);
        Node copy=new Node(root.val);
        mp.put(root,copy);
        for(Node node: root.neighbors)
        {
           copy.neighbors.add(dfs(node,mp));
        }
        return copy;
    }
     public Node cloneGraph(Node node) {
        if(node==null) return null;
        Map<Node,Node> mp=new HashMap<>();
       return dfs(node,new HashMap<>());
       
    }
    

}
