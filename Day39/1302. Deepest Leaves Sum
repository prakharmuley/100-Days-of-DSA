Problem Link: https://leetcode.com/problems/deepest-leaves-sum/



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int deepestLeavesSum(TreeNode root) {
        Queue<TreeNode> q=new LinkedList<>();
        q.offer(root);
        List<List<Integer>> res=new ArrayList<>();
        while(!q.isEmpty())
        {
            int n=q.size();
            List<Integer> l=new ArrayList<>();
            for(int i=0;i<n;i++){
            TreeNode cur=q.poll();
            l.add(cur.val);    
            if(cur.left!=null)
            {
                q.offer(cur.left);
            }
             if(cur.right!=null)
            {
                q.offer(cur.right);
            }       
            } 
            res.add(l);
            
        }
        int ans=0;
        for(int x: res.get(res.size()-1))  ans+=x;
        
        return ans;
    }
}

//Space Optimised Approach
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int deepestLeavesSum(TreeNode root) {
        Queue<TreeNode> q=new LinkedList<>();
        q.offer(root);
        int res=0;
        int i=0;
        while(!q.isEmpty())
        {
            int n=q.size();
           
            for(i=0,res=0;i<n;i++)
            {
            TreeNode cur=q.poll();
            res+=cur.val;  
            if(cur.left!=null)
            {
                q.offer(cur.left);
            }
             if(cur.right!=null)
            {
                q.offer(cur.right);
            }       
           }    
        }
      return res;
    }
}
